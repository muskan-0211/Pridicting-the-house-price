# -*- coding: utf-8 -*-
"""Predicting the House Price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v--IYnZmY6dDFQZk-_GbUWqSJvhjdSJn
"""

boston = load_boston()
df = pd.DataFrame(boston.data)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

df.head()

df.columns = boston.feature_names

df.head()

"""Adding the target column into the DataFrame"""

df['PRICE'] = boston.target

df.head()

df.tail()

df.shape

df.columns

df.dtypes

df.nunique()

df.isnull()

df.isnull().sum()

df.describe()

df.corr

plt.figure(figsize=(10,10))
sns.heatmap(data=df.corr(), annot=True, cmap='Greens')

sns.pairplot(df, size=5)

# Plot a Boxplot
plt.figure(figsize=(50,50))
df.boxplot()

# Minimum Price
df.PRICE.min()

# Maximum Price
df.PRICE.max()

"""Export the Dataset"""

df.to_csv('boston_datset.csv',)

"""Machine Learning-Linear Regression"""

df.head()

X = np.array(df.drop('PRICE', axis=1))
y = np.array(df.PRICE)
# X = boston.data
# y = boston.target

"""Splitting the Data"""

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)

len(X_train)

len(y_train)

len(X_test)

"""Choosing the model"""

model = LinearRegression()

"""Fittig/Train the model"""

model.fit(X_train,y_train)

# Intercept Value
model.intercept_

# Coefficient Value
model.coef_

"""Prediction"""

y_test

y_pred = model.predict(X_test)

y_pred

"""Testing the model performance"""

model.score(X_test,y_test)

# R squared
r2_score(y_test,y_pred)

# Adjusted R squared

# MSE 
mean_squared_error(y_test,y_pred)

# MAE
mean_absolute_error(y_test,y_pred)

# RMSE
np.sqrt(mean_squared_error(y_test,y_pred))

plt.scatter(y_test,y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.grid()
plt.plot([min(y_test),max(y_test)],[min(y_pred),max(y_pred)],color='red')
plt.title('Actual Price V/s Predicted Price')

"""Klib library"""

!pip install klib

import klib
import pandas as pd
from sklearn.datasets import load_diabetes, load_iris

df = pd.read_csv